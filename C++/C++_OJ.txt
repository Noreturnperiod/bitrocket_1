Lesson8 ---string
1、https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e [字符串转整形数字]

2、https://leetcode-cn.com/problems/add-strings/submissions/  [字符串相加]
class Solution {
public:

    int AddItem(int a, int b, int &sign)
    {
        int sum = a + b + sign;
        if(sum >= 10)
        {
            sum -= 10;
            sign = 1;
        }
        else
            sign = 0;
        return sum;
    }
    string addStrings(string num1, string num2) 
    {
        reverse(num1.begin(), num1.end());
        reverse(num2.begin(), num2.end());
        int i, j, sign = 0;
        i = j = 0;
        int sum = 0;

        string res;

        while(i<num1.size() && j<num2.size())
        {
            sum = AddItem(num1[i]-'0', num2[j]-'0', sign);
            res += (sum+'0');
            i++;
            j++;
        }
        while(i < num1.size())
        {
            sum = AddItem(num1[i]-'0', 0, sign);
            res += (sum + '0');
            i++;
        }

        while(j < num2.size())
        {
            sum = AddItem(0, num2[j]-'0', sign);
            res += (sum + '0');
            j++;
        }
        if(sign > 0)
            res += (sign + '0');
        reverse(res.begin(), res.end());
        return res;
    }
};

3、https://leetcode-cn.com/problems/reverse-only-letters/submissions/ [仅仅反转字母]
class Solution {
public:
    string reverseOnlyLetters(string S) 
    {
        if(S.size() <= 1)
            return S;
        
        char *start = (char*)S.c_str();
        char *end = start + S.size()-1;

        while(start < end)
        {
            //寻找左边第一个字母
            while(start < end)
            {
                if((*start>='A'&&*start<='Z') || (*start>='a'&&*start<='z'))
                    break;
                start++;
            }

            //寻找右边第一字母
            while(start < end)
            {
                if((*end>='A'&&*end<='Z') || (*end>='a'&&*end<='z'))
                    break;
                end--;
            }

            //交换首位字母
            char tmp = *start;
            *start = *end;
            *end = tmp;
            start++;
            end--;
        }
        return S;
    }
};


4、https://leetcode-cn.com/problems/first-unique-character-in-a-string/ [字符串中的第一个唯一字符]
方法一:
class Solution {
public:
    int firstUniqChar(string s) 
    {
        int count[256] = {0};  //统计相应字符的次数
        for(int i=0; i<s.size(); ++i)
        {
            count[s[i]]++;
        }

        for(int i=0; i<s.size(); ++i)
        {
            if(count[s[i]] == 1)
                return i;
        }
        return -1;
    }
};

方法二:
class Solution {
public:
    int firstUniqChar(string s) 
    {
        for(int i=0; i<s.size(); ++i)
        {
            int index = s.find(s[i]);
            int reverse_index = s.rfind(s[i]);
            if(index == reverse_index)
                return i;
        }
        return -1;
    }
};

5、https://www.nowcoder.com/practice/8c949ea5f36f422594b306a2300315da?tpId=37&&tqId=21224&rp=5&ru=/activity/oj&qru=/ta/huawei/question-ranking [字符串里面最后一个单词的长度]
#include<iostream>
#include<string>
using namespace std;

int GetLengthForLastWord(string str)
{
    if(str.size()==0)
        return 0;
    int space_index = str.rfind(' ');
    if(space_index == string::npos)
        return str.size();
    return str.size()-space_index-1;
}

int main()
{
    string str;
    getline(cin, str);
    int len = GetLengthForLastWord(str);
    cout<<len;
    return 0;
}



